{"version":3,"sources":["components/Table.js","components/CreateModal.js","components/EditModal.js","App.tsx","index.tsx"],"names":["Table","setId","setOpenEditModal","setOpenCreateModal","getClients","a","expaneClient","request","gql","response","useQuery","status","data","className","map","client","idx","firstName","lastName","phone","value","id","onClick","e","target","OpenEditFormModal","CreateModal","setFirstName","setLastName","setPhone","setAvatarUrl","openCreateModal","avatarUrl","useForm","register","handleSubmit","errors","queryClient","useQueryClient","variables","addClients","console","log","JSON","stringify","undefined","addClientMutuation","useMutation","onSuccess","invalidateQueries","required","maxLength","minLength","errorMessage","error","onSubmit","mutate","type","placeholder","name","ref","onChange","firstname","lastname","EditModal","openEditModal","showHideModal","idVarible","updateClients","updateClientMutuation","GraphQLClient","headers","App","useState","QueryClient","ReactDOM","render","QueryClientProvider","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.433fd49e.chunk.js","sourcesContent":["import { useQuery}  from \"react-query\";\nimport {gql} from \"graphql-request\";\n\nimport { expaneClient } from '../App'\n\nconst Table = ({setId,setOpenEditModal,setOpenCreateModal}) => {\n  const getClients = async () => {\n  const response = await expaneClient.request(gql`{\n      getClients {\n        id\n        firstName\n        lastName\n        phone\n        avatarUrl\n        }\n    }`)\n   return response;\n}\n\nconst { status, data} = useQuery('clients', getClients);\n   \nconst OpenEditFormModal = (e) => {\n  setOpenEditModal(true)\n  setOpenCreateModal(false)\n  setId(e.target.value)\n}\n\n    if (status === 'loading') {\n        return <div>loading...</div> \n      }\n\n    if (status === 'error') {\n        return <div>error</div>\n      }\n\n    return(\n      <div className=\"flex flex-col w-full\">\n        <div className=\"-my-2 py-2 sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8\">\n          <div className=\"align-middle inline-block min-w-full shadow sm:rounded-lg border-b border-gray-200\">\n           <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">firstName</th>\n                  <th className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">lastName</th>\n                  <th className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">phone</th>\n                    {/* <th className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">avatarUrl</th> */}\n                </tr>\n              </thead>\n              {data.getClients.map((client,idx) =>(\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                <tr key={client.id}>\n                  <td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\">{client.firstName}</td>\n                  <td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\">{client.lastName}</td>\n                  <td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\">{client.phone}</td>\n                    {/* <td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\">{client.avatarUrl}</td> */}\n                  <td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\"><button value={client.id} onClick={(e)=> OpenEditFormModal(e)} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Edit</button></td>\n                </tr>\n              </tbody>\n              ))}\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default Table;","import { useForm } from \"react-hook-form\";\nimport {useQueryClient,useMutation}  from \"react-query\";\nimport {gql} from \"graphql-request\";\n\nimport { expaneClient } from '../App'\n\nconst CreateModal = ({\n    setOpenCreateModal, setFirstName, setLastName, setPhone,setAvatarUrl,\n    openCreateModal, firstName, lastName, phone, avatarUrl, id                   \n    }) => {\n\n    const { register, handleSubmit,  errors } = useForm();\n    const queryClient = useQueryClient()\n\n    interface Variables {\n      id: String;\n      firstName : String;\n      lastName: String;\n      phone: String;\n      avatarUrl: String;\n    }\n    const variables: Variables = {\n      id: id,\n      firstName: firstName,\n      lastName: lastName,\n      phone: phone,\n      avatarUrl: avatarUrl\n    }\n\n      const addClients = async () => {\n        const response = await expaneClient.request(gql `\n          mutation AddClient($firstName: String!, $lastName: String!,$phone: String, $avatarUrl: String){\n            addClient(firstName: $firstName, lastName: $lastName, phone: $phone, avatarUrl: $avatarUrl){\n              id\n                firstName\n                lastName\n                phone\n                avatarUrl\n          }\n        }`, variables)\n         console.log(JSON.stringify(response, undefined, 2));\n         return response;\n        }\n    \n      const addClientMutuation =  useMutation(addClients,{\n        onSuccess: () => queryClient.invalidateQueries('clients')\n        })\n    \n    const handleNewClient =   (data) => {\n       addClientMutuation.mutate(data, {\n        onSuccess: () => {\n          setFirstName(\"\")\n          setLastName(\"\")\n          setPhone(\"\")\n          setAvatarUrl(\"\")\n          console.log(data)\n          setOpenCreateModal(false)\n        }});\n    }\n\n    const required = \"This field is required\";\n    const maxLength = \"Your input exceed maximum length\";\n    const minLength = \"Your input exceed minimum length\";\n\n    const errorMessage = error => {\n      return <div className=\"uncorrect-response\">{error}</div>;\n    };\n   \n    return (\n      <div className=\"create-modal\">\n        {openCreateModal && \n          <form onSubmit={handleSubmit(handleNewClient)}>\n            <input type=\"text\"   placeholder=\"firstame\" name=\"firstName\" ref={register({ required: true, maxLength: 18, minLength: 2})} value={firstName} onChange={(e) => setFirstName(e.target.value)}/>\n              {errors.firstname && errors.firstname.type === \"required\" && errorMessage(required)}\n              {errors.firstname && errors.firstname.type === \"maxLength\" && errorMessage(maxLength)}\n              {errors.firstname && errors.firstname.type === \"minLength\" && errorMessage(minLength)}\n            <input  type=\"text\"  placeholder=\"lastname\" name=\"lastName\"  ref={register({ required: true, maxLength: 18, minLength: 2})} value={lastName} onChange={(e) => setLastName(e.target.value)}/>\n              {errors.lastname && errors.lastname.type === \"required\" && errorMessage(required)}\n              {errors.lastname && errors.lastname.type === \"maxLength\" && errorMessage(maxLength)}\n              {errors.lastname && errors.lastname.type === \"minLength\" && errorMessage(minLength)}\n            <input  type=\"text\"  placeholder=\"phone\" name=\"phone\"  ref={register({ required: true, maxLength: 15, minLength: 8})} value={phone} onChange={(e) => setPhone(e.target.value)}/>\n              {errors.phone && errors.phone.type === \"required\" && errorMessage(required)}\n              {errors.phone && errors.phone.type === \"maxLength\" && errorMessage(maxLength)}\n              {errors.phone && errors.phone.type === \"minLength\" && errorMessage(minLength)}\n              {/* <input  type=\"text\"  placeholder=\"avatarUrl\" name=\"avatarUrl\"  ref={register()} value={avatarUrl} onChange={(e) => setAvatarUrl(e.target.value)}/>\n                  {errors.avatarUrl && errors.avatarUrl.type === \"required\" && errorMessage(required)}\n                  {errors.avatarUrl && errors.avatarUrl.type === \"maxLength\" && errorMessage(maxLength)} */}\n            <button type=\"submit\" className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Add</button>\n          </form>\n        }\n      </div>\n    );\n    \n}\n\nexport default CreateModal;","import { useForm } from \"react-hook-form\";\nimport {useQueryClient,useMutation}  from \"react-query\";\nimport {gql} from \"graphql-request\";\n\nimport { expaneClient } from '../App'\n\nconst EditModal = ({\n    setOpenEditModal, setFirstName, setLastName, setPhone,setAvatarUrl, setId,\n    openEditModal, firstName, lastName, phone, avatarUrl,id\n}) => {\n    const { register, handleSubmit,  errors } = useForm();\n\n    const queryClient = useQueryClient()\n    const showHideModal = openEditModal ? \"edit-modal display-block\" : \"edit-modal display-none\";\n    \n    const idVarible = {\n        id: id,\n        firstName: firstName,\n        lastName: lastName,\n        phone: phone,\n        avatarUrl: avatarUrl\n      }\n      \n    const updateClients = async () => {\n        const response = await expaneClient.request(gql`\n        mutation updateClient($id: ID! $firstName: String!, $lastName: String!,$phone: String, $avatarUrl: String){\n          updateClient(id:$id,  firstName: $firstName, lastName: $lastName, phone: $phone, avatarUrl: $avatarUrl){\n            id\n            firstName\n            lastName\n            phone\n            avatarUrl\n          }\n        }`, idVarible) \n          console.log(JSON.stringify(response, undefined, 2))\n      }\n\n    const updateClientMutuation = useMutation(updateClients,{\n        onSuccess: () => queryClient.invalidateQueries('clients')\n      })\n    \n    const handleUpdateClient =  (data) => {\n      setOpenEditModal(false)\n      updateClientMutuation.mutate(data, {\n        onSuccess: () => {\n          setId('')\n          setFirstName('')\n          setLastName('');\n          setPhone('')\n        }})\n     }\n\n     const required = \"This field is required\";\n     const maxLength = \"Your input exceed maximum length\";\n     const minLength = \"Your input exceed minimum length\";\n \n     const errorMessage = error => {\n       return <div className=\"uncorrect-response\">{error}</div>;\n     };\n\n    return (\n    <>\n      {openEditModal && (\n        <div className={showHideModal}>\n            <div className=\"modal-fixed\">\n                <form onSubmit={handleSubmit(handleUpdateClient)}>\n                  <input type=\"text\"   placeholder=\"firstname\" name=\"firstname\" value={firstName} ref={register({ required: true, maxLength: 18, minLength: 2})} onChange={(e) => setFirstName(e.target.value)}/>\n                    {errors.firstname && errors.firstname.type === \"required\" && errorMessage(required)}\n                    {errors.firstname && errors.firstname.type === \"maxLength\" && errorMessage(maxLength)}\n                    {errors.firstname && errors.firstname.type === \"minLength\" && errorMessage(minLength)}    \n                  <input  type=\"text\"  placeholder=\"lastname\" name=\"lastName\" value={lastName} ref={register({ required: true, maxLength: 18, minLength: 2})} onChange={(e) => setLastName(e.target.value)}/>\n                    {errors.lastname && errors.lastname.type === \"required\" && errorMessage(required)}\n                    {errors.lastname && errors.lastname.type === \"maxLength\" && errorMessage(maxLength)} \n                    {errors.lastname && errors.lastname.type === \"minLength\" && errorMessage(minLength)}   \n                  <input  type=\"text\"  placeholder=\"phone\" name=\"phone\"   value={phone} ref={register({ required: true, maxLength: 15, minLength: 8})} onChange={(e) => setPhone(e.target.value)}/>\n                    {errors.phone && errors.phone.type === \"required\" && errorMessage(required)}\n                    {errors.phone && errors.phone.type === \"maxLength\" && errorMessage(maxLength)}\n                    {errors.phone && errors.phone.type === \"minLength\" && errorMessage(minLength)}\n                  <button type=\"submit\" name=\"id\"  ref={register} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Edit</button>\n                </form>\n            </div>\n        </div>\n      )}\n    </>\n    );\n}\n\nexport default EditModal","import React, { useState } from \"react\";\nimport './App.css';\nimport Table from './components/Table'\nimport CreateModel from './components/CreateModal'\nimport EditModal from './components/EditModal'\nimport {GraphQLClient } from \"graphql-request\";\n\n\nconst endpoint = \"https://test-task.expane.pro/api/graphql\";\nexport const expaneClient = new GraphQLClient(endpoint, { headers: {} })\n\nfunction App() {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const [id, setId] = useState('');\n  const [openEditModal, setOpenEditModal] = useState(false);\n  const [openCreateModal, setOpenCreateModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <button onClick={() => openCreateModal ?  setOpenCreateModal(false) : setOpenCreateModal(true)} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">CreateClient</button>\n        <CreateModel setOpenCreateModal={setOpenCreateModal} setFirstName={setFirstName} setLastName={setLastName} setPhone={setPhone} setAvatarUrl={setAvatarUrl}\n          openCreateModal={openCreateModal} firstName={firstName} lastName={lastName} phone={phone} avatarUrl={avatarUrl} id={id}/>\n      </div>\n      <div className=\"flex justify-center mt-8\">\n        <Table setId={setId} setOpenEditModal={setOpenEditModal} setOpenCreateModal={setOpenCreateModal}/>\n        <EditModal setOpenEditModal={setOpenEditModal} setFirstName={setFirstName} setLastName={setLastName} setPhone={setPhone} setAvatarUrl={setAvatarUrl} setId={setId}\n          openEditModal={openEditModal} firstName={firstName} lastName={lastName} phone={phone} avatarUrl={avatarUrl} id={id}  />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider} from 'react-query'\nimport './index.css';\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\n const queryClient = new QueryClient()\n\nReactDOM.render(\n    <QueryClientProvider client={queryClient}>\n        <App />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}